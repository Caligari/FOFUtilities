/*

insert license info here

*/

using System;
using System.Collections;
using System.Collections.Generic;


namespace DBUpdater.Tables
{
	/// <summary>
	/// Generated by MyGeneration using the NHibernate Object Mapping 1.3.1 by Grimaldi Giuseppe (giuseppe.grimaldi@infracom.it)
	/// </summary>
	[Serializable]
	public class FofGameinfo 
	{
		#region Private Members
		
		// Variabili di stato
		private bool misChanged;
		private bool misDeleted;

		// Primary Key(s) 
		private short mid; 
		
		// Properties 
		private short mstartyear; 
		private short mcuryear; 
		private byte mstage; 
		private byte mweek; 
		private byte mfastage; 
		private byte mplayerteam; 
		private byte mteamcount; 
		private long msalarycap; 
		private long mminsalary; 
		private short mschemaversion; 		

		#endregion
		
		#region Default ( Empty ) Class Constructor
		
		/// <summary>
		/// default constructor
		/// </summary>
		public FofGameinfo()
		{
			mid = 0; 
			mstartyear = 0; 
			mcuryear = 0; 
			mstage = 0; 
			mweek = 0; 
			mfastage = 0; 
			mplayerteam = 0; 
			mteamcount = 0; 
			msalarycap = 0; 
			mminsalary = 0; 
			mschemaversion = 0; 
		}
		
		#endregion // End of Default ( Empty ) Class Constructor
		
		#region Full Constructor
		
		/// <summary>
		/// full constructor
		/// </summary>
		public FofGameinfo(short id, short startyear, short curyear, byte stage, byte week, byte fastage, byte playerteam, byte teamcount, long salarycap, long minsalary, short schemaversion)
		{
			mid = id; 
			mstartyear = startyear; 
			mcuryear = curyear; 
			mstage = stage; 
			mweek = week; 
			mfastage = fastage; 
			mplayerteam = playerteam; 
			mteamcount = teamcount; 
			msalarycap = salarycap; 
			mminsalary = minsalary; 
			mschemaversion = schemaversion; 
		}
		
		#endregion // End Full Constructor
		
		#region Internal Accessors for NHibernate
		
		/// <summary>
		/// 
		/// </summary>
		internal virtual short _Id
		{
			get { return mid; }
			set { mid = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual short _StartYear
		{
			get { return mstartyear; }
			set { mstartyear = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual short _CurYear
		{
			get { return mcuryear; }
			set { mcuryear = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _Stage
		{
			get { return mstage; }
			set { mstage = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _Week
		{
			get { return mweek; }
			set { mweek = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _FaStage
		{
			get { return mfastage; }
			set { mfastage = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _PlayerTeam
		{
			get { return mplayerteam; }
			set { mplayerteam = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _TeamCount
		{
			get { return mteamcount; }
			set { mteamcount = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual long _SalaryCap
		{
			get { return msalarycap; }
			set { msalarycap = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual long _MinSalary
		{
			get { return mminsalary; }
			set { mminsalary = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual short _SchemaVersion
		{
			get { return mschemaversion; }
			set { mschemaversion = value; }
		} 
	  
		#endregion // Internal Accessors for NHibernate 

		#region Public Properties
			
		/// <summary>
		/// 
		/// </summary>		
		public virtual short Id
		{
			get { return mid; }
			set { misChanged |= (mid != value); mid = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual short StartYear
		{
			get { return mstartyear; }
			set { misChanged |= (mstartyear != value); mstartyear = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual short CurYear
		{
			get { return mcuryear; }
			set { misChanged |= (mcuryear != value); mcuryear = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual byte Stage
		{
			get { return mstage; }
			set { misChanged |= (mstage != value); mstage = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual byte Week
		{
			get { return mweek; }
			set { misChanged |= (mweek != value); mweek = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual byte FaStage
		{
			get { return mfastage; }
			set { misChanged |= (mfastage != value); mfastage = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual byte PlayerTeam
		{
			get { return mplayerteam; }
			set { misChanged |= (mplayerteam != value); mplayerteam = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual byte TeamCount
		{
			get { return mteamcount; }
			set { misChanged |= (mteamcount != value); mteamcount = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual long SalaryCap
		{
			get { return msalarycap; }
			set { misChanged |= (msalarycap != value); msalarycap = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual long MinSalary
		{
			get { return mminsalary; }
			set { misChanged |= (mminsalary != value); mminsalary = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual short SchemaVersion
		{
			get { return mschemaversion; }
			set { misChanged |= (mschemaversion != value); mschemaversion = value; }
		} 
	  
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public virtual bool IsChanged
		{
			get { return misChanged; }
		}
		
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public virtual bool IsDeleted
		{
			get { return misDeleted; }
		}
		
		#endregion 
		
		#region Public Functions

		/// <summary>
		/// mark the item as deleted
		/// </summary>
		public virtual void MarkAsDeleted()
		{
			misDeleted = true;
			misChanged = true;
		}
		
		#endregion
		
		#region Equals And HashCode Overrides
		
		/// <summary>
		/// local implementation of Equals based on unique value members
		/// </summary>
		public override bool Equals( object obj )
		{
			if( this == obj ) return true;
			if( ( obj == null ) || ( obj.GetType() != this.GetType() ) ) return false;
			FofGameinfo castObj = (FofGameinfo)obj; 
			return ( castObj != null ) &&
				( this.mid == castObj.Id );
		}
		
		/// <summary>
		/// local implementation of GetHashCode based on unique value members
		/// </summary>
		public override int GetHashCode()
		{ 
			int hash = 57; 
			hash = 27 * hash * this.mid.GetHashCode();
					
			return hash;		
			
		}
		
		#endregion
		
	}
}