/*

insert license info here

*/

using System;
using System.Collections;
using System.Collections.Generic;


namespace DBUpdater.Tables
{
	/// <summary>
	/// Generated by MyGeneration using the NHibernate Object Mapping 1.3.1 by Grimaldi Giuseppe (giuseppe.grimaldi@infracom.it)
	/// </summary>
	[Serializable]
	public class FofPlayergamestats 
	{
		#region Private Members
		
		// Variabili di stato
		private bool misChanged;
		private bool misDeleted;

		// Primary Key(s) 
		private int mid; 
		
		// Properties 
		private int mplayerid; 
		private short myear; 
		private byte mweek; 
		private byte mteam; 
		private byte mgameplayed; 
		private byte mgamestarted; 
		private byte mpassattempts; 
		private byte mpasscompletions; 
		private short mpassyards; 
		private short mlongestpass; 
		private byte mtdpasses; 
		private byte mintthrown; 
		private byte mtimessacked; 
		private short msackedyards; 
		private byte mrushattempts; 
		private short mrushingyards; 
		private short mlongestrun; 
		private byte mrushtd; 
		private byte mcatches; 
		private short mreceivingyards; 
		private short mlongestreception; 
		private byte mreceivingtds; 
		private byte mpasstargets; 
		private short myardsaftercatch; 
		private byte mpassdrops; 
		private byte mpuntreturns; 
		private short mpuntreturnyards; 
		private byte mpuntreturntds; 
		private byte mkickreturns; 
		private short mkickreturnyards; 
		private byte mkickreturntds; 
		private byte mfumbles; 
		private byte mfumblerecoveries; 
		private byte mforcedfumbles; 
		private byte mmisctd; 
		private byte mkeyrunblock; 
		private byte mkeyrunblockopportunites; 
		private byte msacksallowed; 
		private byte mtackles; 
		private byte massists; 
		private short msacks; 
		private byte mints; 
		private short mintreturnyards; 
		private byte mintreturntds; 
		private byte mpassesdefended; 
		private byte mpassesblocked; 
		private byte mqbhurries; 
		private byte mpassescaught; 
		private byte mpassplays; 
		private byte mrunplays; 
		private byte mfgmade; 
		private byte mfgattempted; 
		private byte mfglong; 
		private byte mpat; 
		private byte mpatattempted; 
		private byte mpunts; 
		private short mpuntyards; 
		private short mpuntlong; 
		private byte mpuntin20; 
		private byte mpoints; 
		private byte mopposingteamid; 
		private byte mthirddownrushes; 
		private byte mthirddownrushconversions; 
		private byte mthirddownpassattempts; 
		private byte mthirddownpasscompletions; 
		private byte mthirddownpassconversions; 
		private byte mthirddownreceivingtargets; 
		private byte mthirddownreceivingcatches; 
		private byte mthirddownreceivingconversions; 
		private byte mfirstdownrushes; 
		private byte mfirstdownpasses; 
		private byte mfirstdowncatches; 
		private byte mfg40plusattempts; 
		private byte mfg40plusmade; 
		private byte mfg50plusattempts; 
		private byte mfg50plusmade; 
		private short mpuntnetyards; 
		private byte mspecialteamstackles; 
		private byte mtimesknockeddown; 
		private byte mredzonerushes; 
		private short mredzonerushingyards; 
		private byte mredzonepassattempts; 
		private byte mredzonepasscompletions; 
		private short mredzonepassingyards; 
		private byte mredzonereceivingtargets; 
		private byte mredzonereceivingcatches; 
		private short mredzonereceivingyards; 
		private byte mtotaltds; 
		private byte mtwopointconversions; 
		private byte mpancakeblocks; 
		private byte mqbknockdowns; 
		private byte mspecialteamsplays; 
		private byte mrushinggamesover100yards; 
		private byte mreceivinggamesover100yards; 
		private byte mpassinggamesover300yards; 
		private byte mrunsof10yardsplus; 
		private byte mcatchesof20yardsplus; 
		private byte mthrowsof20yardsplus; 
		private short mallpurposeyards; 
		private short myardsfromscrimmage;
		private byte mdoublecoveragesthrowninto;
		private byte mdoublecoveragesavoided;
		private byte mbadpasses;
		private byte mrunsforloss;
		private byte mrunsof20yardsplus;
		private byte mfumbleslost;
		private byte mhaskeycoverage;
		private byte mthrownat;
		private byte mtacklesforloss;
		private byte massistedtacklesforloss;
		private byte mreceptionsof20yardsplusgivenup;
		private byte mkickoffs;
		private short mkickoffyards;
		private byte mkickofftouchbacks;
		private short mtotalfieldpositionafterkickoff;
		private byte moffensivepassplays;
		private byte moffensiverunplays;
		private byte mdefensivepassplays;
		private byte mdefensiverunplays;
		private byte msuccessfulpasses;
		private byte msuccessfulcatches;
		private byte msuccessfulruns;
		private byte mbadpassescaught;

		#endregion
		
		#region Default ( Empty ) Class Constructor
		
		/// <summary>
		/// default constructor
		/// </summary>
		public FofPlayergamestats()
		{
			mid = 0; 
			mplayerid = 0; 
			myear = 0; 
			mweek = 0; 
			mteam = 0; 
			mgameplayed = 0; 
			mgamestarted = 0; 
			mpassattempts = 0; 
			mpasscompletions = 0; 
			mpassyards = 0; 
			mlongestpass = 0; 
			mtdpasses = 0; 
			mintthrown = 0; 
			mtimessacked = 0; 
			msackedyards = 0; 
			mrushattempts = 0; 
			mrushingyards = 0; 
			mlongestrun = 0; 
			mrushtd = 0; 
			mcatches = 0; 
			mreceivingyards = 0; 
			mlongestreception = 0; 
			mreceivingtds = 0; 
			mpasstargets = 0; 
			myardsaftercatch = 0; 
			mpassdrops = 0; 
			mpuntreturns = 0; 
			mpuntreturnyards = 0; 
			mpuntreturntds = 0; 
			mkickreturns = 0; 
			mkickreturnyards = 0; 
			mkickreturntds = 0; 
			mfumbles = 0; 
			mfumblerecoveries = 0; 
			mforcedfumbles = 0; 
			mmisctd = 0; 
			mkeyrunblock = 0; 
			mkeyrunblockopportunites = 0; 
			msacksallowed = 0; 
			mtackles = 0; 
			massists = 0; 
			msacks = 0; 
			mints = 0; 
			mintreturnyards = 0; 
			mintreturntds = 0; 
			mpassesdefended = 0; 
			mpassesblocked = 0; 
			mqbhurries = 0; 
			mpassescaught = 0; 
			mpassplays = 0; 
			mrunplays = 0; 
			mfgmade = 0; 
			mfgattempted = 0; 
			mfglong = 0; 
			mpat = 0; 
			mpatattempted = 0; 
			mpunts = 0; 
			mpuntyards = 0; 
			mpuntlong = 0; 
			mpuntin20 = 0; 
			mpoints = 0; 
			mopposingteamid = 0; 
			mthirddownrushes = 0; 
			mthirddownrushconversions = 0; 
			mthirddownpassattempts = 0; 
			mthirddownpasscompletions = 0; 
			mthirddownpassconversions = 0; 
			mthirddownreceivingtargets = 0; 
			mthirddownreceivingcatches = 0; 
			mthirddownreceivingconversions = 0; 
			mfirstdownrushes = 0; 
			mfirstdownpasses = 0; 
			mfirstdowncatches = 0; 
			mfg40plusattempts = 0; 
			mfg40plusmade = 0; 
			mfg50plusattempts = 0; 
			mfg50plusmade = 0; 
			mpuntnetyards = 0; 
			mspecialteamstackles = 0; 
			mtimesknockeddown = 0; 
			mredzonerushes = 0; 
			mredzonerushingyards = 0; 
			mredzonepassattempts = 0; 
			mredzonepasscompletions = 0; 
			mredzonepassingyards = 0; 
			mredzonereceivingtargets = 0; 
			mredzonereceivingcatches = 0; 
			mredzonereceivingyards = 0; 
			mtotaltds = 0; 
			mtwopointconversions = 0; 
			mpancakeblocks = 0; 
			mqbknockdowns = 0; 
			mspecialteamsplays = 0; 
			mrushinggamesover100yards = 0; 
			mreceivinggamesover100yards = 0; 
			mpassinggamesover300yards = 0; 
			mrunsof10yardsplus = 0; 
			mcatchesof20yardsplus = 0; 
			mthrowsof20yardsplus = 0; 
			mallpurposeyards = 0; 
			myardsfromscrimmage = 0;
			mdoublecoveragesthrowninto = 0;
			mdoublecoveragesavoided = 0;
			mbadpasses = 0;
			mrunsforloss = 0;
			mrunsof20yardsplus = 0;
			mfumbleslost = 0;
			mhaskeycoverage = 0;
			mthrownat = 0;
			mtacklesforloss = 0;
			massistedtacklesforloss = 0;
			mreceptionsof20yardsplusgivenup = 0;
			mkickoffs = 0;
			mkickoffyards = 0;
			mkickofftouchbacks = 0;
			mtotalfieldpositionafterkickoff = 0;
			moffensivepassplays = 0;
			moffensiverunplays = 0;
			mdefensivepassplays = 0;
			mdefensiverunplays = 0;
			msuccessfulpasses = 0;
			msuccessfulcatches = 0;
			msuccessfulruns = 0;
			mbadpassescaught = 0;
		}
		
		#endregion // End of Default ( Empty ) Class Constructor
		
		#region Full Constructor
		
		/// <summary>
		/// full constructor
		/// </summary>
		public FofPlayergamestats(int id, int playerid, short year, byte week, byte team, byte gameplayed, byte gamestarted, byte passattempts, byte passcompletions, short passyards, short longestpass, byte tdpasses, byte intthrown, byte timessacked, short sackedyards, byte rushattempts, short rushingyards, short longestrun, byte rushtd, byte catches, short receivingyards, short longestreception, byte receivingtds, byte passtargets, short yardsaftercatch, byte passdrops, byte puntreturns, short puntreturnyards, byte puntreturntds, byte kickreturns, short kickreturnyards, byte kickreturntds, byte fumbles, byte fumblerecoveries, byte forcedfumbles, byte misctd, byte keyrunblock, byte keyrunblockopportunites, byte sacksallowed, byte tackles, byte assists, short sacks, byte ints, short intreturnyards, byte intreturntds, byte passesdefended, byte passesblocked, byte qbhurries, byte passescaught, byte passplays, byte runplays, byte fgmade, byte fgattempted, byte fglong, byte pat, byte patattempted, byte punts, short puntyards, short puntlong, byte puntin20, byte points, byte opposingteamid, byte thirddownrushes, byte thirddownrushconversions, byte thirddownpassattempts, byte thirddownpasscompletions, byte thirddownpassconversions, byte thirddownreceivingtargets, byte thirddownreceivingcatches, byte thirddownreceivingconversions, byte firstdownrushes, byte firstdownpasses, byte firstdowncatches, byte fg40plusattempts, byte fg40plusmade, byte fg50plusattempts, byte fg50plusmade, short puntnetyards, byte specialteamstackles, byte timesknockeddown, byte redzonerushes, short redzonerushingyards, byte redzonepassattempts, byte redzonepasscompletions, short redzonepassingyards, byte redzonereceivingtargets, byte redzonereceivingcatches, short redzonereceivingyards, byte totaltds, byte twopointconversions, byte pancakeblocks, byte qbknockdowns, byte specialteamsplays, byte rushinggamesover100yards, byte receivinggamesover100yards, byte passinggamesover300yards, byte runsof10yardsplus, byte catchesof20yardsplus, byte throwsof20yardsplus, short allpurposeyards, short yardsfromscrimmage, byte doublecoveragesthrowninto,
			byte doublecoveragesavoided,
			byte badpasses,
			byte runsforloss,
			byte runsof20yardsplus,
			byte fumbleslost,
			byte haskeycoverage,
			byte thrownat,
			byte tacklesforloss,
			byte assistedtacklesforloss,
			byte receptionsof20yardsplusgivenup,
			byte kickoffs,
			short kickoffyards,
			byte kickofftouchbacks,
			short totalfieldpositionafterkickoff,
			byte offensivepassplays,
			byte offensiverunplays,
			byte defensivepassplays,
			byte defensiverunplays,
			byte successfulpasses,
			byte successfulcatches,
			byte successfulruns,
			byte badpassescaught
			)
		{
			mid = id; 
			mplayerid = playerid; 
			myear = year; 
			mweek = week; 
			mteam = team; 
			mgameplayed = gameplayed; 
			mgamestarted = gamestarted; 
			mpassattempts = passattempts; 
			mpasscompletions = passcompletions; 
			mpassyards = passyards; 
			mlongestpass = longestpass; 
			mtdpasses = tdpasses; 
			mintthrown = intthrown; 
			mtimessacked = timessacked; 
			msackedyards = sackedyards; 
			mrushattempts = rushattempts; 
			mrushingyards = rushingyards; 
			mlongestrun = longestrun; 
			mrushtd = rushtd; 
			mcatches = catches; 
			mreceivingyards = receivingyards; 
			mlongestreception = longestreception; 
			mreceivingtds = receivingtds; 
			mpasstargets = passtargets; 
			myardsaftercatch = yardsaftercatch; 
			mpassdrops = passdrops; 
			mpuntreturns = puntreturns; 
			mpuntreturnyards = puntreturnyards; 
			mpuntreturntds = puntreturntds; 
			mkickreturns = kickreturns; 
			mkickreturnyards = kickreturnyards; 
			mkickreturntds = kickreturntds; 
			mfumbles = fumbles; 
			mfumblerecoveries = fumblerecoveries; 
			mforcedfumbles = forcedfumbles; 
			mmisctd = misctd; 
			mkeyrunblock = keyrunblock; 
			mkeyrunblockopportunites = keyrunblockopportunites; 
			msacksallowed = sacksallowed; 
			mtackles = tackles; 
			massists = assists; 
			msacks = sacks; 
			mints = ints; 
			mintreturnyards = intreturnyards; 
			mintreturntds = intreturntds; 
			mpassesdefended = passesdefended; 
			mpassesblocked = passesblocked; 
			mqbhurries = qbhurries; 
			mpassescaught = passescaught; 
			mpassplays = passplays; 
			mrunplays = runplays; 
			mfgmade = fgmade; 
			mfgattempted = fgattempted; 
			mfglong = fglong; 
			mpat = pat; 
			mpatattempted = patattempted; 
			mpunts = punts; 
			mpuntyards = puntyards; 
			mpuntlong = puntlong; 
			mpuntin20 = puntin20; 
			mpoints = points; 
			mopposingteamid = opposingteamid; 
			mthirddownrushes = thirddownrushes; 
			mthirddownrushconversions = thirddownrushconversions; 
			mthirddownpassattempts = thirddownpassattempts; 
			mthirddownpasscompletions = thirddownpasscompletions; 
			mthirddownpassconversions = thirddownpassconversions; 
			mthirddownreceivingtargets = thirddownreceivingtargets; 
			mthirddownreceivingcatches = thirddownreceivingcatches; 
			mthirddownreceivingconversions = thirddownreceivingconversions; 
			mfirstdownrushes = firstdownrushes; 
			mfirstdownpasses = firstdownpasses; 
			mfirstdowncatches = firstdowncatches; 
			mfg40plusattempts = fg40plusattempts; 
			mfg40plusmade = fg40plusmade; 
			mfg50plusattempts = fg50plusattempts; 
			mfg50plusmade = fg50plusmade; 
			mpuntnetyards = puntnetyards; 
			mspecialteamstackles = specialteamstackles; 
			mtimesknockeddown = timesknockeddown; 
			mredzonerushes = redzonerushes; 
			mredzonerushingyards = redzonerushingyards; 
			mredzonepassattempts = redzonepassattempts; 
			mredzonepasscompletions = redzonepasscompletions; 
			mredzonepassingyards = redzonepassingyards; 
			mredzonereceivingtargets = redzonereceivingtargets; 
			mredzonereceivingcatches = redzonereceivingcatches; 
			mredzonereceivingyards = redzonereceivingyards; 
			mtotaltds = totaltds; 
			mtwopointconversions = twopointconversions; 
			mpancakeblocks = pancakeblocks; 
			mqbknockdowns = qbknockdowns; 
			mspecialteamsplays = specialteamsplays; 
			mrushinggamesover100yards = rushinggamesover100yards; 
			mreceivinggamesover100yards = receivinggamesover100yards; 
			mpassinggamesover300yards = passinggamesover300yards; 
			mrunsof10yardsplus = runsof10yardsplus; 
			mcatchesof20yardsplus = catchesof20yardsplus; 
			mthrowsof20yardsplus = throwsof20yardsplus; 
			mallpurposeyards = allpurposeyards; 
			myardsfromscrimmage = yardsfromscrimmage;
			mdoublecoveragesthrowninto = doublecoveragesthrowninto;
			mdoublecoveragesavoided = doublecoveragesavoided;
			mbadpasses = badpasses;
			mrunsforloss = runsforloss;
			mrunsof20yardsplus = runsof20yardsplus;
			mfumbleslost = fumbleslost;
			mhaskeycoverage = haskeycoverage;
			mthrownat = thrownat;
			mtacklesforloss = tacklesforloss;
			massistedtacklesforloss = assistedtacklesforloss;
			mreceptionsof20yardsplusgivenup = receptionsof20yardsplusgivenup;
			mkickoffs = kickoffs;
			mkickoffyards = kickoffyards;
			mkickofftouchbacks = kickofftouchbacks;
			mtotalfieldpositionafterkickoff = totalfieldpositionafterkickoff;
			moffensivepassplays = offensivepassplays;
			moffensiverunplays = offensiverunplays;
			mdefensivepassplays = defensivepassplays;
			mdefensiverunplays = defensiverunplays;
			msuccessfulpasses = successfulpasses;
			msuccessfulcatches = successfulcatches;
			msuccessfulruns = successfulruns;
			mbadpassescaught = badpassescaught;
		}
		
		#endregion // End Full Constructor
		
		#region Internal Accessors for NHibernate
		
		/// <summary>
		/// 
		/// </summary>
		internal virtual int _Id
		{
			get { return mid; }
			set { mid = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual int _Playerid
		{
			get { return mplayerid; }
			set { mplayerid = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual short _Year
		{
			get { return myear; }
			set { myear = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _Week
		{
			get { return mweek; }
			set { mweek = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _Team
		{
			get { return mteam; }
			set { mteam = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _GamePlayed
		{
			get { return mgameplayed; }
			set { mgameplayed = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _GameStarted
		{
			get { return mgamestarted; }
			set { mgamestarted = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _PassAttempts
		{
			get { return mpassattempts; }
			set { mpassattempts = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _PassCompletions
		{
			get { return mpasscompletions; }
			set { mpasscompletions = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual short _PassYards
		{
			get { return mpassyards; }
			set { mpassyards = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual short _LongestPass
		{
			get { return mlongestpass; }
			set { mlongestpass = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _TdPasses
		{
			get { return mtdpasses; }
			set { mtdpasses = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _IntThrown
		{
			get { return mintthrown; }
			set { mintthrown = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _TimesSacked
		{
			get { return mtimessacked; }
			set { mtimessacked = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual short _SackedYards
		{
			get { return msackedyards; }
			set { msackedyards = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _RushAttempts
		{
			get { return mrushattempts; }
			set { mrushattempts = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual short _RushingYards
		{
			get { return mrushingyards; }
			set { mrushingyards = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual short _LongestRun
		{
			get { return mlongestrun; }
			set { mlongestrun = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _Rushtd
		{
			get { return mrushtd; }
			set { mrushtd = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _Catches
		{
			get { return mcatches; }
			set { mcatches = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual short _ReceivingYards
		{
			get { return mreceivingyards; }
			set { mreceivingyards = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual short _LongestReception
		{
			get { return mlongestreception; }
			set { mlongestreception = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _ReceivingtDs
		{
			get { return mreceivingtds; }
			set { mreceivingtds = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _PassTargets
		{
			get { return mpasstargets; }
			set { mpasstargets = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual short _YardsAfterCatch
		{
			get { return myardsaftercatch; }
			set { myardsaftercatch = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _PassDrops
		{
			get { return mpassdrops; }
			set { mpassdrops = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _PuntReturns
		{
			get { return mpuntreturns; }
			set { mpuntreturns = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual short _PuntReturnYards
		{
			get { return mpuntreturnyards; }
			set { mpuntreturnyards = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _PuntReturntDs
		{
			get { return mpuntreturntds; }
			set { mpuntreturntds = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _KickReturns
		{
			get { return mkickreturns; }
			set { mkickreturns = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual short _KickReturnYards
		{
			get { return mkickreturnyards; }
			set { mkickreturnyards = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _KickReturntDs
		{
			get { return mkickreturntds; }
			set { mkickreturntds = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _Fumbles
		{
			get { return mfumbles; }
			set { mfumbles = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _FumbleRecoveries
		{
			get { return mfumblerecoveries; }
			set { mfumblerecoveries = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _ForcedFumbles
		{
			get { return mforcedfumbles; }
			set { mforcedfumbles = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _Misctd
		{
			get { return mmisctd; }
			set { mmisctd = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _KeyRunBlock
		{
			get { return mkeyrunblock; }
			set { mkeyrunblock = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _KeyRunBlockOpportunites
		{
			get { return mkeyrunblockopportunites; }
			set { mkeyrunblockopportunites = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _SacksAllowed
		{
			get { return msacksallowed; }
			set { msacksallowed = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _Tackles
		{
			get { return mtackles; }
			set { mtackles = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _Assists
		{
			get { return massists; }
			set { massists = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual short _Sacks
		{
			get { return msacks; }
			set { msacks = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _InTs
		{
			get { return mints; }
			set { mints = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual short _IntReturnYards
		{
			get { return mintreturnyards; }
			set { mintreturnyards = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _IntReturntDs
		{
			get { return mintreturntds; }
			set { mintreturntds = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _PassesDefended
		{
			get { return mpassesdefended; }
			set { mpassesdefended = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _PassesBlocked
		{
			get { return mpassesblocked; }
			set { mpassesblocked = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _QbHurries
		{
			get { return mqbhurries; }
			set { mqbhurries = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _PassesCaught
		{
			get { return mpassescaught; }
			set { mpassescaught = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _PassPlays
		{
			get { return mpassplays; }
			set { mpassplays = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _RunPlays
		{
			get { return mrunplays; }
			set { mrunplays = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _FgMade
		{
			get { return mfgmade; }
			set { mfgmade = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _FgAttempted
		{
			get { return mfgattempted; }
			set { mfgattempted = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _FgLong
		{
			get { return mfglong; }
			set { mfglong = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _Pat
		{
			get { return mpat; }
			set { mpat = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _PatAttempted
		{
			get { return mpatattempted; }
			set { mpatattempted = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _Punts
		{
			get { return mpunts; }
			set { mpunts = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual short _PuntYards
		{
			get { return mpuntyards; }
			set { mpuntyards = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual short _PuntLong
		{
			get { return mpuntlong; }
			set { mpuntlong = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _PuntIn20
		{
			get { return mpuntin20; }
			set { mpuntin20 = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _Points
		{
			get { return mpoints; }
			set { mpoints = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _OpposingTeamid
		{
			get { return mopposingteamid; }
			set { mopposingteamid = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _ThirdDownRushes
		{
			get { return mthirddownrushes; }
			set { mthirddownrushes = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _ThirdDownRushConversions
		{
			get { return mthirddownrushconversions; }
			set { mthirddownrushconversions = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _ThirdDownPassAttempts
		{
			get { return mthirddownpassattempts; }
			set { mthirddownpassattempts = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _ThirdDownPassCompletions
		{
			get { return mthirddownpasscompletions; }
			set { mthirddownpasscompletions = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _ThirdDownPassConversions
		{
			get { return mthirddownpassconversions; }
			set { mthirddownpassconversions = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _ThirdDownReceivingTargets
		{
			get { return mthirddownreceivingtargets; }
			set { mthirddownreceivingtargets = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _ThirdDownReceivingCatches
		{
			get { return mthirddownreceivingcatches; }
			set { mthirddownreceivingcatches = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _ThirdDownReceivingConversions
		{
			get { return mthirddownreceivingconversions; }
			set { mthirddownreceivingconversions = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _FirstDownRushes
		{
			get { return mfirstdownrushes; }
			set { mfirstdownrushes = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _FirstDownPasses
		{
			get { return mfirstdownpasses; }
			set { mfirstdownpasses = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _FirstDownCatches
		{
			get { return mfirstdowncatches; }
			set { mfirstdowncatches = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _Fg40PlusAttempts
		{
			get { return mfg40plusattempts; }
			set { mfg40plusattempts = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _Fg40PlusMade
		{
			get { return mfg40plusmade; }
			set { mfg40plusmade = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _Fg50PlusAttempts
		{
			get { return mfg50plusattempts; }
			set { mfg50plusattempts = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _Fg50PlusMade
		{
			get { return mfg50plusmade; }
			set { mfg50plusmade = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual short _PuntNetYards
		{
			get { return mpuntnetyards; }
			set { mpuntnetyards = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _SpecialTeamsTackles
		{
			get { return mspecialteamstackles; }
			set { mspecialteamstackles = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _TimesKnockedDown
		{
			get { return mtimesknockeddown; }
			set { mtimesknockeddown = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _RedZoneRushes
		{
			get { return mredzonerushes; }
			set { mredzonerushes = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual short _RedZoneRushingYards
		{
			get { return mredzonerushingyards; }
			set { mredzonerushingyards = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _RedZonePassAttempts
		{
			get { return mredzonepassattempts; }
			set { mredzonepassattempts = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _RedZonePassCompletions
		{
			get { return mredzonepasscompletions; }
			set { mredzonepasscompletions = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual short _RedZonePassingYards
		{
			get { return mredzonepassingyards; }
			set { mredzonepassingyards = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _RedZoneReceivingTargets
		{
			get { return mredzonereceivingtargets; }
			set { mredzonereceivingtargets = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _RedZoneReceivingCatches
		{
			get { return mredzonereceivingcatches; }
			set { mredzonereceivingcatches = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual short _RedZoneReceivingYards
		{
			get { return mredzonereceivingyards; }
			set { mredzonereceivingyards = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _TotaltDs
		{
			get { return mtotaltds; }
			set { mtotaltds = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _TwoPointConversions
		{
			get { return mtwopointconversions; }
			set { mtwopointconversions = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _PancakeBlocks
		{
			get { return mpancakeblocks; }
			set { mpancakeblocks = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _QbKnockdowns
		{
			get { return mqbknockdowns; }
			set { mqbknockdowns = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _SpecialTeamsPlays
		{
			get { return mspecialteamsplays; }
			set { mspecialteamsplays = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _RushingGamesOver100Yards
		{
			get { return mrushinggamesover100yards; }
			set { mrushinggamesover100yards = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _ReceivingGamesOver100Yards
		{
			get { return mreceivinggamesover100yards; }
			set { mreceivinggamesover100yards = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _PassingGamesOver300Yards
		{
			get { return mpassinggamesover300yards; }
			set { mpassinggamesover300yards = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _RunsOf10YardsPlus
		{
			get { return mrunsof10yardsplus; }
			set { mrunsof10yardsplus = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _CatchesOf20YardsPlus
		{
			get { return mcatchesof20yardsplus; }
			set { mcatchesof20yardsplus = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _ThrowsOf20YardsPlus
		{
			get { return mthrowsof20yardsplus; }
			set { mthrowsof20yardsplus = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual short _AllPurposeYards
		{
			get { return mallpurposeyards; }
			set { mallpurposeyards = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual short _YardsFromScrimmage
		{
			get { return myardsfromscrimmage; }
			set { myardsfromscrimmage = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _DoubleCoveragesThrownInto
		{
			get { return mdoublecoveragesthrowninto; }
			set { mdoublecoveragesthrowninto = value; }
		}
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _DoubleCoveragesAvoided
		{
			get { return mdoublecoveragesavoided; }
			set { mdoublecoveragesavoided = value; }
		}
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _BadPasses
		{
			get { return mbadpasses; }
			set { mbadpasses = value; }
		}
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _RunsForLoss
		{
			get { return mrunsforloss; }
			set { mrunsforloss = value; }
		}
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _RunsOf20YardsPlus
		{
			get { return mrunsof20yardsplus; }
			set { mrunsof20yardsplus = value; }
		}
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _FumblesLost
		{
			get { return mfumbleslost; }
			set { mfumbleslost = value; }
		}

		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _HasKeyCoverage
		{
			get { return mhaskeycoverage; }
			set { mhaskeycoverage = value; }
		}
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _ThrownAt
		{
			get { return mthrownat; }
			set { mthrownat = value; }
		}
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _TacklesForLoss
		{
			get { return mtacklesforloss; }
			set { mtacklesforloss = value; }
		}

		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _AssistedTacklesForLoss
		{
			get { return massistedtacklesforloss; }
			set { massistedtacklesforloss = value; }
		}
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _ReceptionsOf20YardsPlusGivenUp
		{
			get { return mreceptionsof20yardsplusgivenup; }
			set { mreceptionsof20yardsplusgivenup = value; }
		}

		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _Kickoffs
		{
			get { return mkickoffs; }
			set { mkickoffs = value; }
		}
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual short _KickoffYards
		{
			get { return mkickoffyards; }
			set { mkickoffyards = value; }
		}
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _KickoffTouchbacks
		{
			get { return mkickofftouchbacks; }
			set { mkickofftouchbacks = value; }
		}
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual short _TotalFieldPositionAfterKickoff
		{
			get { return mtotalfieldpositionafterkickoff; }
			set { mtotalfieldpositionafterkickoff = value; }
		}
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _OffensivePassPlays
		{
			get { return moffensivepassplays; }
			set { moffensivepassplays = value; }
		}
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _OffensiveRunPlays
		{
			get { return moffensiverunplays; }
			set { moffensiverunplays = value; }
		}
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _DefensivePassPlays
		{
			get { return mdefensivepassplays; }
			set { mdefensivepassplays = value; }
		}
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _DefensiveRunPlays
		{
			get { return mdefensiverunplays; }
			set { mdefensiverunplays = value; }
		}
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _SuccessfulPasses
		{
			get { return msuccessfulpasses; }
			set { msuccessfulpasses = value; }
		}
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _SuccessfulCatches
		{
			get { return msuccessfulcatches; }
			set { msuccessfulcatches = value; }
		}
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _SuccessfulRuns
		{
			get { return msuccessfulruns; }
			set { msuccessfulruns = value; }
		}
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _BadPassesCaught
		{
			get { return mbadpassescaught; }
			set { mbadpassescaught = value; }
		}
	  
		#endregion // Internal Accessors for NHibernate 

		#region Public Properties
			
		/// <summary>
		/// 
		/// </summary>		
		public virtual int Id
		{
			get { return mid; }
			set { misChanged |= (mid != value); mid = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual int Playerid
		{
			get { return mplayerid; }
			set { misChanged |= (mplayerid != value); mplayerid = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual short Year
		{
			get { return myear; }
			set { misChanged |= (myear != value); myear = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual byte Week
		{
			get { return mweek; }
			set { misChanged |= (mweek != value); mweek = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual byte Team
		{
			get { return mteam; }
			set { misChanged |= (mteam != value); mteam = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual byte GamePlayed
		{
			get { return mgameplayed; }
			set { misChanged |= (mgameplayed != value); mgameplayed = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual byte GameStarted
		{
			get { return mgamestarted; }
			set { misChanged |= (mgamestarted != value); mgamestarted = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual byte PassAttempts
		{
			get { return mpassattempts; }
			set { misChanged |= (mpassattempts != value); mpassattempts = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual byte PassCompletions
		{
			get { return mpasscompletions; }
			set { misChanged |= (mpasscompletions != value); mpasscompletions = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual short PassYards
		{
			get { return mpassyards; }
			set { misChanged |= (mpassyards != value); mpassyards = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual short LongestPass
		{
			get { return mlongestpass; }
			set { misChanged |= (mlongestpass != value); mlongestpass = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual byte TdPasses
		{
			get { return mtdpasses; }
			set { misChanged |= (mtdpasses != value); mtdpasses = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual byte IntThrown
		{
			get { return mintthrown; }
			set { misChanged |= (mintthrown != value); mintthrown = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual byte TimesSacked
		{
			get { return mtimessacked; }
			set { misChanged |= (mtimessacked != value); mtimessacked = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual short SackedYards
		{
			get { return msackedyards; }
			set { misChanged |= (msackedyards != value); msackedyards = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual byte RushAttempts
		{
			get { return mrushattempts; }
			set { misChanged |= (mrushattempts != value); mrushattempts = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual short RushingYards
		{
			get { return mrushingyards; }
			set { misChanged |= (mrushingyards != value); mrushingyards = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual short LongestRun
		{
			get { return mlongestrun; }
			set { misChanged |= (mlongestrun != value); mlongestrun = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual byte Rushtd
		{
			get { return mrushtd; }
			set { misChanged |= (mrushtd != value); mrushtd = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual byte Catches
		{
			get { return mcatches; }
			set { misChanged |= (mcatches != value); mcatches = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual short ReceivingYards
		{
			get { return mreceivingyards; }
			set { misChanged |= (mreceivingyards != value); mreceivingyards = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual short LongestReception
		{
			get { return mlongestreception; }
			set { misChanged |= (mlongestreception != value); mlongestreception = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual byte ReceivingtDs
		{
			get { return mreceivingtds; }
			set { misChanged |= (mreceivingtds != value); mreceivingtds = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual byte PassTargets
		{
			get { return mpasstargets; }
			set { misChanged |= (mpasstargets != value); mpasstargets = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual short YardsAfterCatch
		{
			get { return myardsaftercatch; }
			set { misChanged |= (myardsaftercatch != value); myardsaftercatch = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual byte PassDrops
		{
			get { return mpassdrops; }
			set { misChanged |= (mpassdrops != value); mpassdrops = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual byte PuntReturns
		{
			get { return mpuntreturns; }
			set { misChanged |= (mpuntreturns != value); mpuntreturns = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual short PuntReturnYards
		{
			get { return mpuntreturnyards; }
			set { misChanged |= (mpuntreturnyards != value); mpuntreturnyards = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual byte PuntReturntDs
		{
			get { return mpuntreturntds; }
			set { misChanged |= (mpuntreturntds != value); mpuntreturntds = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual byte KickReturns
		{
			get { return mkickreturns; }
			set { misChanged |= (mkickreturns != value); mkickreturns = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual short KickReturnYards
		{
			get { return mkickreturnyards; }
			set { misChanged |= (mkickreturnyards != value); mkickreturnyards = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual byte KickReturntDs
		{
			get { return mkickreturntds; }
			set { misChanged |= (mkickreturntds != value); mkickreturntds = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual byte Fumbles
		{
			get { return mfumbles; }
			set { misChanged |= (mfumbles != value); mfumbles = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual byte FumbleRecoveries
		{
			get { return mfumblerecoveries; }
			set { misChanged |= (mfumblerecoveries != value); mfumblerecoveries = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual byte ForcedFumbles
		{
			get { return mforcedfumbles; }
			set { misChanged |= (mforcedfumbles != value); mforcedfumbles = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual byte Misctd
		{
			get { return mmisctd; }
			set { misChanged |= (mmisctd != value); mmisctd = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual byte KeyRunBlock
		{
			get { return mkeyrunblock; }
			set { misChanged |= (mkeyrunblock != value); mkeyrunblock = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual byte KeyRunBlockOpportunites
		{
			get { return mkeyrunblockopportunites; }
			set { misChanged |= (mkeyrunblockopportunites != value); mkeyrunblockopportunites = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual byte SacksAllowed
		{
			get { return msacksallowed; }
			set { misChanged |= (msacksallowed != value); msacksallowed = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual byte Tackles
		{
			get { return mtackles; }
			set { misChanged |= (mtackles != value); mtackles = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual byte Assists
		{
			get { return massists; }
			set { misChanged |= (massists != value); massists = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual short Sacks
		{
			get { return msacks; }
			set { misChanged |= (msacks != value); msacks = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual byte InTs
		{
			get { return mints; }
			set { misChanged |= (mints != value); mints = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual short IntReturnYards
		{
			get { return mintreturnyards; }
			set { misChanged |= (mintreturnyards != value); mintreturnyards = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual byte IntReturntDs
		{
			get { return mintreturntds; }
			set { misChanged |= (mintreturntds != value); mintreturntds = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual byte PassesDefended
		{
			get { return mpassesdefended; }
			set { misChanged |= (mpassesdefended != value); mpassesdefended = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual byte PassesBlocked
		{
			get { return mpassesblocked; }
			set { misChanged |= (mpassesblocked != value); mpassesblocked = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual byte QbHurries
		{
			get { return mqbhurries; }
			set { misChanged |= (mqbhurries != value); mqbhurries = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual byte PassesCaught
		{
			get { return mpassescaught; }
			set { misChanged |= (mpassescaught != value); mpassescaught = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual byte PassPlays
		{
			get { return mpassplays; }
			set { misChanged |= (mpassplays != value); mpassplays = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual byte RunPlays
		{
			get { return mrunplays; }
			set { misChanged |= (mrunplays != value); mrunplays = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual byte FgMade
		{
			get { return mfgmade; }
			set { misChanged |= (mfgmade != value); mfgmade = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual byte FgAttempted
		{
			get { return mfgattempted; }
			set { misChanged |= (mfgattempted != value); mfgattempted = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual byte FgLong
		{
			get { return mfglong; }
			set { misChanged |= (mfglong != value); mfglong = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual byte Pat
		{
			get { return mpat; }
			set { misChanged |= (mpat != value); mpat = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual byte PatAttempted
		{
			get { return mpatattempted; }
			set { misChanged |= (mpatattempted != value); mpatattempted = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual byte Punts
		{
			get { return mpunts; }
			set { misChanged |= (mpunts != value); mpunts = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual short PuntYards
		{
			get { return mpuntyards; }
			set { misChanged |= (mpuntyards != value); mpuntyards = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual short PuntLong
		{
			get { return mpuntlong; }
			set { misChanged |= (mpuntlong != value); mpuntlong = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual byte PuntIn20
		{
			get { return mpuntin20; }
			set { misChanged |= (mpuntin20 != value); mpuntin20 = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual byte Points
		{
			get { return mpoints; }
			set { misChanged |= (mpoints != value); mpoints = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual byte OpposingTeamid
		{
			get { return mopposingteamid; }
			set { misChanged |= (mopposingteamid != value); mopposingteamid = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual byte ThirdDownRushes
		{
			get { return mthirddownrushes; }
			set { misChanged |= (mthirddownrushes != value); mthirddownrushes = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual byte ThirdDownRushConversions
		{
			get { return mthirddownrushconversions; }
			set { misChanged |= (mthirddownrushconversions != value); mthirddownrushconversions = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual byte ThirdDownPassAttempts
		{
			get { return mthirddownpassattempts; }
			set { misChanged |= (mthirddownpassattempts != value); mthirddownpassattempts = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual byte ThirdDownPassCompletions
		{
			get { return mthirddownpasscompletions; }
			set { misChanged |= (mthirddownpasscompletions != value); mthirddownpasscompletions = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual byte ThirdDownPassConversions
		{
			get { return mthirddownpassconversions; }
			set { misChanged |= (mthirddownpassconversions != value); mthirddownpassconversions = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual byte ThirdDownReceivingTargets
		{
			get { return mthirddownreceivingtargets; }
			set { misChanged |= (mthirddownreceivingtargets != value); mthirddownreceivingtargets = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual byte ThirdDownReceivingCatches
		{
			get { return mthirddownreceivingcatches; }
			set { misChanged |= (mthirddownreceivingcatches != value); mthirddownreceivingcatches = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual byte ThirdDownReceivingConversions
		{
			get { return mthirddownreceivingconversions; }
			set { misChanged |= (mthirddownreceivingconversions != value); mthirddownreceivingconversions = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual byte FirstDownRushes
		{
			get { return mfirstdownrushes; }
			set { misChanged |= (mfirstdownrushes != value); mfirstdownrushes = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual byte FirstDownPasses
		{
			get { return mfirstdownpasses; }
			set { misChanged |= (mfirstdownpasses != value); mfirstdownpasses = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual byte FirstDownCatches
		{
			get { return mfirstdowncatches; }
			set { misChanged |= (mfirstdowncatches != value); mfirstdowncatches = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual byte Fg40PlusAttempts
		{
			get { return mfg40plusattempts; }
			set { misChanged |= (mfg40plusattempts != value); mfg40plusattempts = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual byte Fg40PlusMade
		{
			get { return mfg40plusmade; }
			set { misChanged |= (mfg40plusmade != value); mfg40plusmade = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual byte Fg50PlusAttempts
		{
			get { return mfg50plusattempts; }
			set { misChanged |= (mfg50plusattempts != value); mfg50plusattempts = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual byte Fg50PlusMade
		{
			get { return mfg50plusmade; }
			set { misChanged |= (mfg50plusmade != value); mfg50plusmade = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual short PuntNetYards
		{
			get { return mpuntnetyards; }
			set { misChanged |= (mpuntnetyards != value); mpuntnetyards = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual byte SpecialTeamsTackles
		{
			get { return mspecialteamstackles; }
			set { misChanged |= (mspecialteamstackles != value); mspecialteamstackles = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual byte TimesKnockedDown
		{
			get { return mtimesknockeddown; }
			set { misChanged |= (mtimesknockeddown != value); mtimesknockeddown = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual byte RedZoneRushes
		{
			get { return mredzonerushes; }
			set { misChanged |= (mredzonerushes != value); mredzonerushes = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual short RedZoneRushingYards
		{
			get { return mredzonerushingyards; }
			set { misChanged |= (mredzonerushingyards != value); mredzonerushingyards = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual byte RedZonePassAttempts
		{
			get { return mredzonepassattempts; }
			set { misChanged |= (mredzonepassattempts != value); mredzonepassattempts = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual byte RedZonePassCompletions
		{
			get { return mredzonepasscompletions; }
			set { misChanged |= (mredzonepasscompletions != value); mredzonepasscompletions = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual short RedZonePassingYards
		{
			get { return mredzonepassingyards; }
			set { misChanged |= (mredzonepassingyards != value); mredzonepassingyards = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual byte RedZoneReceivingTargets
		{
			get { return mredzonereceivingtargets; }
			set { misChanged |= (mredzonereceivingtargets != value); mredzonereceivingtargets = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual byte RedZoneReceivingCatches
		{
			get { return mredzonereceivingcatches; }
			set { misChanged |= (mredzonereceivingcatches != value); mredzonereceivingcatches = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual short RedZoneReceivingYards
		{
			get { return mredzonereceivingyards; }
			set { misChanged |= (mredzonereceivingyards != value); mredzonereceivingyards = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual byte TotaltDs
		{
			get { return mtotaltds; }
			set { misChanged |= (mtotaltds != value); mtotaltds = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual byte TwoPointConversions
		{
			get { return mtwopointconversions; }
			set { misChanged |= (mtwopointconversions != value); mtwopointconversions = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual byte PancakeBlocks
		{
			get { return mpancakeblocks; }
			set { misChanged |= (mpancakeblocks != value); mpancakeblocks = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual byte QbKnockdowns
		{
			get { return mqbknockdowns; }
			set { misChanged |= (mqbknockdowns != value); mqbknockdowns = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual byte SpecialTeamsPlays
		{
			get { return mspecialteamsplays; }
			set { misChanged |= (mspecialteamsplays != value); mspecialteamsplays = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual byte RushingGamesOver100Yards
		{
			get { return mrushinggamesover100yards; }
			set { misChanged |= (mrushinggamesover100yards != value); mrushinggamesover100yards = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual byte ReceivingGamesOver100Yards
		{
			get { return mreceivinggamesover100yards; }
			set { misChanged |= (mreceivinggamesover100yards != value); mreceivinggamesover100yards = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual byte PassingGamesOver300Yards
		{
			get { return mpassinggamesover300yards; }
			set { misChanged |= (mpassinggamesover300yards != value); mpassinggamesover300yards = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual byte RunsOf10YardsPlus
		{
			get { return mrunsof10yardsplus; }
			set { misChanged |= (mrunsof10yardsplus != value); mrunsof10yardsplus = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual byte CatchesOf20YardsPlus
		{
			get { return mcatchesof20yardsplus; }
			set { misChanged |= (mcatchesof20yardsplus != value); mcatchesof20yardsplus = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual byte ThrowsOf20YardsPlus
		{
			get { return mthrowsof20yardsplus; }
			set { misChanged |= (mthrowsof20yardsplus != value); mthrowsof20yardsplus = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual short AllPurposeYards
		{
			get { return mallpurposeyards; }
			set { misChanged |= (mallpurposeyards != value); mallpurposeyards = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual short YardsFromScrimmage
		{
			get { return myardsfromscrimmage; }
			set { misChanged |= (myardsfromscrimmage != value); myardsfromscrimmage = value; }
		}

		/// <summary>
		/// 
		/// </summary>
		internal virtual byte DoubleCoveragesThrownInto
		{
			get { return mdoublecoveragesthrowninto; }
			set { misChanged |= (mdoublecoveragesthrowninto != value); mdoublecoveragesthrowninto = value; }
		}

		/// <summary>
		/// 
		/// </summary>
		internal virtual byte DoubleCoveragesAvoided
		{
			get { return mdoublecoveragesavoided; }
			set { misChanged |= (mdoublecoveragesavoided != value); mdoublecoveragesavoided = value; }
		}

		/// <summary>
		/// 
		/// </summary>
		internal virtual byte BadPasses
		{
			get { return mbadpasses; }
			set { misChanged |= (mbadpasses != value); mbadpasses = value; }
		}

		/// <summary>
		/// 
		/// </summary>
		internal virtual byte RunsForLoss
		{
			get { return mrunsforloss; }
			set { misChanged |= (mrunsforloss != value); mrunsforloss = value; }
		}

		/// <summary>
		/// 
		/// </summary>
		internal virtual byte RunsOf20YardsPlus
		{
			get { return mrunsof20yardsplus; }
			set { misChanged |= (mrunsof20yardsplus != value); mrunsof20yardsplus = value; }
		}

		/// <summary>
		/// 
		/// </summary>
		internal virtual byte FumblesLost
		{
			get { return mfumbleslost; }
			set { misChanged |= (mfumbleslost != value); mfumbleslost = value; }
		}

		/// <summary>
		/// 
		/// </summary>
		internal virtual byte HasKeyCoverage
		{
			get { return mhaskeycoverage; }
			set { misChanged |= (mhaskeycoverage != value); mhaskeycoverage = value; }
		}

		/// <summary>
		/// 
		/// </summary>
		internal virtual byte ThrownAt
		{
			get { return mthrownat; }
			set { misChanged |= (mthrownat != value); mthrownat = value; }
		}

		/// <summary>
		/// 
		/// </summary>
		internal virtual byte TacklesForLoss
		{
			get { return mtacklesforloss; }
			set { misChanged |= (mtacklesforloss != value); mtacklesforloss = value; }
		}

		/// <summary>
		/// 
		/// </summary>
		internal virtual byte AssistedTacklesForLoss
		{
			get { return massistedtacklesforloss; }
			set { misChanged |= (massistedtacklesforloss != value); massistedtacklesforloss = value; }
		}

		/// <summary>
		/// 
		/// </summary>
		internal virtual byte ReceptionsOf20YardsPlusGivenUp
		{
			get { return mreceptionsof20yardsplusgivenup; }
			set { misChanged |= (mreceptionsof20yardsplusgivenup != value); mreceptionsof20yardsplusgivenup = value; }
		}

		/// <summary>
		/// 
		/// </summary>
		internal virtual byte Kickoffs
		{
			get { return mkickoffs; }
			set { misChanged |= (mkickoffs != value); mkickoffs = value; }
		}

		/// <summary>
		/// 
		/// </summary>
		internal virtual short KickoffYards
		{
			get { return mkickoffyards; }
			set { misChanged |= (mkickoffyards != value); mkickoffyards = value; }
		}

		/// <summary>
		/// 
		/// </summary>
		internal virtual byte KickoffTouchbacks
		{
			get { return mkickofftouchbacks; }
			set { misChanged |= (mkickofftouchbacks != value); mkickofftouchbacks = value; }
		}

		/// <summary>
		/// 
		/// </summary>
		internal virtual short TotalFieldPositionAfterKickoff
		{
			get { return mtotalfieldpositionafterkickoff; }
			set { misChanged |= (mtotalfieldpositionafterkickoff != value); mtotalfieldpositionafterkickoff = value; }
		}

		/// <summary>
		/// 
		/// </summary>
		internal virtual byte OffensivePassPlays
		{
			get { return moffensivepassplays; }
			set { misChanged |= (moffensivepassplays != value); moffensivepassplays = value; }
		}

		/// <summary>
		/// 
		/// </summary>
		internal virtual byte OffensiveRunPlays
		{
			get { return moffensiverunplays; }
			set { misChanged |= (moffensiverunplays != value); moffensiverunplays = value; }
		}

		/// <summary>
		/// 
		/// </summary>
		internal virtual byte DefensivePassPlays
		{
			get { return mdefensivepassplays; }
			set { misChanged |= (mdefensivepassplays != value); mdefensivepassplays = value; }
		}

		/// <summary>
		/// 
		/// </summary>
		internal virtual byte DefensiveRunPlays
		{
			get { return mdefensiverunplays; }
			set { misChanged |= (mdefensiverunplays != value); mdefensiverunplays = value; }
		}

		/// <summary>
		/// 
		/// </summary>
		internal virtual byte SuccessfulPasses
		{
			get { return msuccessfulpasses; }
			set { misChanged |= (msuccessfulpasses != value); msuccessfulpasses = value; }
		}

		/// <summary>
		/// 
		/// </summary>
		internal virtual byte SuccessfulCatches
		{
			get { return msuccessfulcatches; }
			set { misChanged |= (msuccessfulcatches != value); msuccessfulcatches = value; }
		}

		/// <summary>
		/// 
		/// </summary>
		internal virtual byte SuccessfulRuns
		{
			get { return msuccessfulruns; }
			set { misChanged |= (msuccessfulruns != value); msuccessfulruns = value; }
		}

		/// <summary>
		/// 
		/// </summary>
		internal virtual byte BadPassesCaught
		{
			get { return mbadpassescaught; }
			set { misChanged |= (mbadpassescaught != value); mbadpassescaught = value; }
		}
	  
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public virtual bool IsChanged
		{
			get { return misChanged; }
		}
		
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public virtual bool IsDeleted
		{
			get { return misDeleted; }
		}
		
		#endregion 
		
		#region Public Functions

		/// <summary>
		/// mark the item as deleted
		/// </summary>
		public virtual void MarkAsDeleted()
		{
			misDeleted = true;
			misChanged = true;
		}
		
		#endregion
		
		#region Equals And HashCode Overrides
		
		/// <summary>
		/// local implementation of Equals based on unique value members
		/// </summary>
		public override bool Equals( object obj )
		{
			if( this == obj ) return true;
			if( ( obj == null ) || ( obj.GetType() != this.GetType() ) ) return false;
			FofPlayergamestats castObj = (FofPlayergamestats)obj; 
			return ( castObj != null ) &&
				( this.mid == castObj.Id );
		}
		
		/// <summary>
		/// local implementation of GetHashCode based on unique value members
		/// </summary>
		public override int GetHashCode()
		{ 
			int hash = 57; 
			hash = 27 * hash * this.mid.GetHashCode();
					
			return hash;		
			
		}
		
		#endregion
		
	}
}