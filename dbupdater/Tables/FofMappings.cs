/*

insert license info here

*/

using System;
using System.Collections;
using System.Collections.Generic;


namespace DBUpdater.Tables
{
	/// <summary>
	/// Generated by MyGeneration using the NHibernate Object Mapping 1.3.1 by Grimaldi Giuseppe (giuseppe.grimaldi@infracom.it)
	/// </summary>
	[Serializable]
	public class FofMappings 
	{
		#region Private Members
		
		// Variabili di stato
		private bool misChanged;
		private bool misDeleted;

		// Primary Key(s) 
		private short mid; 
		
		// Properties 
		private string mposition; 
		private string mpositiongroup; 
		private string mtransactiontype; 
		private string mprecipitation; 
		private string mplayerstatus; 
		private string mstaffrole; 
		private string mplayoffs; 
		private string mability; 
		private string mstadiumtype; 
		private string mconstructiontype; 
		private string mdriveresult; 		

		#endregion
		
		#region Default ( Empty ) Class Constructor
		
		/// <summary>
		/// default constructor
		/// </summary>
		public FofMappings()
		{
			mid = 0; 
			mposition = null; 
			mpositiongroup = null; 
			mtransactiontype = null; 
			mprecipitation = null; 
			mplayerstatus = null; 
			mstaffrole = null; 
			mplayoffs = null; 
			mability = null; 
			mstadiumtype = null; 
			mconstructiontype = null; 
			mdriveresult = null; 
		}
		
		#endregion // End of Default ( Empty ) Class Constructor
		
		#region Full Constructor
		
		/// <summary>
		/// full constructor
		/// </summary>
		public FofMappings(short id, string position, string positiongroup, string transactiontype, string precipitation, string playerstatus, string staffrole, string playoffs, string ability, string stadiumtype, string constructiontype, string driveresult)
		{
			mid = id; 
			mposition = position; 
			mpositiongroup = positiongroup; 
			mtransactiontype = transactiontype; 
			mprecipitation = precipitation; 
			mplayerstatus = playerstatus; 
			mstaffrole = staffrole; 
			mplayoffs = playoffs; 
			mability = ability; 
			mstadiumtype = stadiumtype; 
			mconstructiontype = constructiontype; 
			mdriveresult = driveresult; 
		}
		
		#endregion // End Full Constructor
		
		#region Internal Accessors for NHibernate
		
		/// <summary>
		/// 
		/// </summary>
		internal virtual short _Id
		{
			get { return mid; }
			set { mid = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual string _Position
		{
			get { return mposition; }
			set { mposition = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual string _PositionGroup
		{
			get { return mpositiongroup; }
			set { mpositiongroup = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual string _TransactionType
		{
			get { return mtransactiontype; }
			set { mtransactiontype = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual string _Precipitation
		{
			get { return mprecipitation; }
			set { mprecipitation = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual string _PlayerStatus
		{
			get { return mplayerstatus; }
			set { mplayerstatus = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual string _StaffRole
		{
			get { return mstaffrole; }
			set { mstaffrole = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual string _Playoffs
		{
			get { return mplayoffs; }
			set { mplayoffs = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual string _Ability
		{
			get { return mability; }
			set { mability = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual string _StadiumType
		{
			get { return mstadiumtype; }
			set { mstadiumtype = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual string _ConstructionType
		{
			get { return mconstructiontype; }
			set { mconstructiontype = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual string _DriveResult
		{
			get { return mdriveresult; }
			set { mdriveresult = value; }
		} 
	  
		#endregion // Internal Accessors for NHibernate 

		#region Public Properties
			
		/// <summary>
		/// 
		/// </summary>		
		public virtual short Id
		{
			get { return mid; }
			set { misChanged |= (mid != value); mid = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual string Position
		{
			get { return mposition; }
			set	
			{
				if ( value != null )
					if( value.Length > 4)
						throw new ArgumentOutOfRangeException("Invalid value for Position", value, value.ToString());
				
				misChanged |= (mposition != value); mposition = value;
			}
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual string PositionGroup
		{
			get { return mpositiongroup; }
			set	
			{
				if ( value != null )
					if( value.Length > 3)
						throw new ArgumentOutOfRangeException("Invalid value for PositionGroup", value, value.ToString());
				
				misChanged |= (mpositiongroup != value); mpositiongroup = value;
			}
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual string TransactionType
		{
			get { return mtransactiontype; }
			set	
			{
				if ( value != null )
					if( value.Length > 64)
						throw new ArgumentOutOfRangeException("Invalid value for TransactionType", value, value.ToString());
				
				misChanged |= (mtransactiontype != value); mtransactiontype = value;
			}
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual string Precipitation
		{
			get { return mprecipitation; }
			set	
			{
				if ( value != null )
					if( value.Length > 10)
						throw new ArgumentOutOfRangeException("Invalid value for Precipitation", value, value.ToString());
				
				misChanged |= (mprecipitation != value); mprecipitation = value;
			}
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual string PlayerStatus
		{
			get { return mplayerstatus; }
			set	
			{
				if ( value != null )
					if( value.Length > 20)
						throw new ArgumentOutOfRangeException("Invalid value for PlayerStatus", value, value.ToString());
				
				misChanged |= (mplayerstatus != value); mplayerstatus = value;
			}
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual string StaffRole
		{
			get { return mstaffrole; }
			set	
			{
				if ( value != null )
					if( value.Length > 20)
						throw new ArgumentOutOfRangeException("Invalid value for StaffRole", value, value.ToString());
				
				misChanged |= (mstaffrole != value); mstaffrole = value;
			}
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual string Playoffs
		{
			get { return mplayoffs; }
			set	
			{
				if ( value != null )
					if( value.Length > 20)
						throw new ArgumentOutOfRangeException("Invalid value for Playoffs", value, value.ToString());
				
				misChanged |= (mplayoffs != value); mplayoffs = value;
			}
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual string Ability
		{
			get { return mability; }
			set	
			{
				if ( value != null )
					if( value.Length > 12)
						throw new ArgumentOutOfRangeException("Invalid value for Ability", value, value.ToString());
				
				misChanged |= (mability != value); mability = value;
			}
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual string StadiumType
		{
			get { return mstadiumtype; }
			set	
			{
				if ( value != null )
					if( value.Length > 25)
						throw new ArgumentOutOfRangeException("Invalid value for StadiumType", value, value.ToString());
				
				misChanged |= (mstadiumtype != value); mstadiumtype = value;
			}
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual string ConstructionType
		{
			get { return mconstructiontype; }
			set	
			{
				if ( value != null )
					if( value.Length > 15)
						throw new ArgumentOutOfRangeException("Invalid value for ConstructionType", value, value.ToString());
				
				misChanged |= (mconstructiontype != value); mconstructiontype = value;
			}
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual string DriveResult
		{
			get { return mdriveresult; }
			set	
			{
				if ( value != null )
					if( value.Length > 15)
						throw new ArgumentOutOfRangeException("Invalid value for DriveResult", value, value.ToString());
				
				misChanged |= (mdriveresult != value); mdriveresult = value;
			}
		} 
	  
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public virtual bool IsChanged
		{
			get { return misChanged; }
		}
		
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public virtual bool IsDeleted
		{
			get { return misDeleted; }
		}
		
		#endregion 
		
		#region Public Functions

		/// <summary>
		/// mark the item as deleted
		/// </summary>
		public virtual void MarkAsDeleted()
		{
			misDeleted = true;
			misChanged = true;
		}
		
		#endregion
		
		#region Equals And HashCode Overrides
		
		/// <summary>
		/// local implementation of Equals based on unique value members
		/// </summary>
		public override bool Equals( object obj )
		{
			if( this == obj ) return true;
			if( ( obj == null ) || ( obj.GetType() != this.GetType() ) ) return false;
			FofMappings castObj = (FofMappings)obj; 
			return ( castObj != null ) &&
				( this.mid == castObj.Id );
		}
		
		/// <summary>
		/// local implementation of GetHashCode based on unique value members
		/// </summary>
		public override int GetHashCode()
		{ 
			int hash = 57; 
			hash = 27 * hash * this.mid.GetHashCode();
					
			return hash;		
			
		}
		
		#endregion
		
	}
}