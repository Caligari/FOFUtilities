/*

insert license info here

*/

using System;
using System.Collections;
using System.Collections.Generic;


namespace DBUpdater.Tables
{
	/// <summary>
	/// Generated by MyGeneration using the NHibernate Object Mapping 1.3.1 by Grimaldi Giuseppe (giuseppe.grimaldi@infracom.it)
	/// </summary>
	[Serializable]
	public class FofCities 
	{
		#region Private Members
		
		// Variabili di stato
		private bool misChanged;
		private bool misDeleted;

		// Primary Key(s) 
		private int mid; 
		
		// Properties 
		private string mname; 
		private string mabbrev; 
		private long mpop; 
		private float mgrowth; 
		private int mavginc; 
		private float mpovlevel; 
		private byte mentcomp; 
		private short msepthi; 
		private short mseptlo; 
		private byte msepthum; 
		private short mdechi; 
		private short mdeclo; 
		private byte mdechum; 
		private short mninetydegdays; 
		private short msnowdays; 
		private short mstormdays; 
		private short melev; 
		private float mlongitude; 
		private float mlatitude; 
		private byte mregion; 
		private byte mstate; 
		private byte mwantsteam; 		

		#endregion
		
		#region Default ( Empty ) Class Constructor
		
		/// <summary>
		/// default constructor
		/// </summary>
		public FofCities()
		{
			mid = 0; 
			mname = null; 
			mabbrev = null; 
			mpop = 0; 
			mgrowth = 0; 
			mavginc = 0; 
			mpovlevel = 0; 
			mentcomp = 0; 
			msepthi = 0; 
			mseptlo = 0; 
			msepthum = 0; 
			mdechi = 0; 
			mdeclo = 0; 
			mdechum = 0; 
			mninetydegdays = 0; 
			msnowdays = 0; 
			mstormdays = 0; 
			melev = 0; 
			mlongitude = 0; 
			mlatitude = 0; 
			mregion = 0; 
			mstate = 0; 
			mwantsteam = 0; 
		}
		
		#endregion // End of Default ( Empty ) Class Constructor
		
		#region Full Constructor
		
		/// <summary>
		/// full constructor
		/// </summary>
		public FofCities(int id, string name, string abbrev, long pop, float growth, int avginc, float povlevel, byte entcomp, short septhi, short septlo, byte septhum, short dechi, short declo, byte dechum, short ninetydegdays, short snowdays, short stormdays, short elev, float longitude, float latitude, byte region, byte state, byte wantsteam)
		{
			mid = id; 
			mname = name; 
			mabbrev = abbrev; 
			mpop = pop; 
			mgrowth = growth; 
			mavginc = avginc; 
			mpovlevel = povlevel; 
			mentcomp = entcomp; 
			msepthi = septhi; 
			mseptlo = septlo; 
			msepthum = septhum; 
			mdechi = dechi; 
			mdeclo = declo; 
			mdechum = dechum; 
			mninetydegdays = ninetydegdays; 
			msnowdays = snowdays; 
			mstormdays = stormdays; 
			melev = elev; 
			mlongitude = longitude; 
			mlatitude = latitude; 
			mregion = region; 
			mstate = state; 
			mwantsteam = wantsteam; 
		}
		
		#endregion // End Full Constructor
		
		#region Internal Accessors for NHibernate
		
		/// <summary>
		/// 
		/// </summary>
		internal virtual int _Id
		{
			get { return mid; }
			set { mid = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual string _Name
		{
			get { return mname; }
			set { mname = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual string _Abbrev
		{
			get { return mabbrev; }
			set { mabbrev = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual long _Pop
		{
			get { return mpop; }
			set { mpop = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual float _Growth
		{
			get { return mgrowth; }
			set { mgrowth = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual int _AvgInc
		{
			get { return mavginc; }
			set { mavginc = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual float _PovLevel
		{
			get { return mpovlevel; }
			set { mpovlevel = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _EntComp
		{
			get { return mentcomp; }
			set { mentcomp = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual short _SeptHi
		{
			get { return msepthi; }
			set { msepthi = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual short _SeptLo
		{
			get { return mseptlo; }
			set { mseptlo = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _SeptHum
		{
			get { return msepthum; }
			set { msepthum = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual short _DecHi
		{
			get { return mdechi; }
			set { mdechi = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual short _DecLo
		{
			get { return mdeclo; }
			set { mdeclo = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _DecHum
		{
			get { return mdechum; }
			set { mdechum = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual short _NinetyDegDays
		{
			get { return mninetydegdays; }
			set { mninetydegdays = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual short _SnowDays
		{
			get { return msnowdays; }
			set { msnowdays = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual short _StormDays
		{
			get { return mstormdays; }
			set { mstormdays = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual short _Elev
		{
			get { return melev; }
			set { melev = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual float _Longitude
		{
			get { return mlongitude; }
			set { mlongitude = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual float _Latitude
		{
			get { return mlatitude; }
			set { mlatitude = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _Region
		{
			get { return mregion; }
			set { mregion = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _State
		{
			get { return mstate; }
			set { mstate = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _WantsTeam
		{
			get { return mwantsteam; }
			set { mwantsteam = value; }
		} 
	  
		#endregion // Internal Accessors for NHibernate 

		#region Public Properties
			
		/// <summary>
		/// 
		/// </summary>		
		public virtual int Id
		{
			get { return mid; }
			set { misChanged |= (mid != value); mid = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual string Name
		{
			get { return mname; }
			set	
			{
				if ( value != null )
					if( value.Length > 45)
						throw new ArgumentOutOfRangeException("Invalid value for Name", value, value.ToString());
				
				misChanged |= (mname != value); mname = value;
			}
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual string Abbrev
		{
			get { return mabbrev; }
			set	
			{
				if ( value != null )
					if( value.Length > 3)
						throw new ArgumentOutOfRangeException("Invalid value for Abbrev", value, value.ToString());
				
				misChanged |= (mabbrev != value); mabbrev = value;
			}
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual long Pop
		{
			get { return mpop; }
			set { misChanged |= (mpop != value); mpop = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual float Growth
		{
			get { return mgrowth; }
			set { misChanged |= (mgrowth != value); mgrowth = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual int AvgInc
		{
			get { return mavginc; }
			set { misChanged |= (mavginc != value); mavginc = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual float PovLevel
		{
			get { return mpovlevel; }
			set { misChanged |= (mpovlevel != value); mpovlevel = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual byte EntComp
		{
			get { return mentcomp; }
			set { misChanged |= (mentcomp != value); mentcomp = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual short SeptHi
		{
			get { return msepthi; }
			set { misChanged |= (msepthi != value); msepthi = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual short SeptLo
		{
			get { return mseptlo; }
			set { misChanged |= (mseptlo != value); mseptlo = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual byte SeptHum
		{
			get { return msepthum; }
			set { misChanged |= (msepthum != value); msepthum = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual short DecHi
		{
			get { return mdechi; }
			set { misChanged |= (mdechi != value); mdechi = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual short DecLo
		{
			get { return mdeclo; }
			set { misChanged |= (mdeclo != value); mdeclo = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual byte DecHum
		{
			get { return mdechum; }
			set { misChanged |= (mdechum != value); mdechum = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual short NinetyDegDays
		{
			get { return mninetydegdays; }
			set { misChanged |= (mninetydegdays != value); mninetydegdays = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual short SnowDays
		{
			get { return msnowdays; }
			set { misChanged |= (msnowdays != value); msnowdays = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual short StormDays
		{
			get { return mstormdays; }
			set { misChanged |= (mstormdays != value); mstormdays = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual short Elev
		{
			get { return melev; }
			set { misChanged |= (melev != value); melev = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual float Longitude
		{
			get { return mlongitude; }
			set { misChanged |= (mlongitude != value); mlongitude = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual float Latitude
		{
			get { return mlatitude; }
			set { misChanged |= (mlatitude != value); mlatitude = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual byte Region
		{
			get { return mregion; }
			set { misChanged |= (mregion != value); mregion = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual byte State
		{
			get { return mstate; }
			set { misChanged |= (mstate != value); mstate = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual byte WantsTeam
		{
			get { return mwantsteam; }
			set { misChanged |= (mwantsteam != value); mwantsteam = value; }
		} 
	  
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public virtual bool IsChanged
		{
			get { return misChanged; }
		}
		
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public virtual bool IsDeleted
		{
			get { return misDeleted; }
		}
		
		#endregion 
		
		#region Public Functions

		/// <summary>
		/// mark the item as deleted
		/// </summary>
		public virtual void MarkAsDeleted()
		{
			misDeleted = true;
			misChanged = true;
		}
		
		#endregion
		
		#region Equals And HashCode Overrides
		
		/// <summary>
		/// local implementation of Equals based on unique value members
		/// </summary>
		public override bool Equals( object obj )
		{
			if( this == obj ) return true;
			if( ( obj == null ) || ( obj.GetType() != this.GetType() ) ) return false;
			FofCities castObj = (FofCities)obj; 
			return ( castObj != null ) &&
				( this.mid == castObj.Id );
		}
		
		/// <summary>
		/// local implementation of GetHashCode based on unique value members
		/// </summary>
		public override int GetHashCode()
		{ 
			int hash = 57; 
			hash = 27 * hash * this.mid.GetHashCode();
					
			return hash;		
			
		}
		
		#endregion
		
	}
}