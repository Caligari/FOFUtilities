/*

insert license info here

*/

using System;
using System.Collections;
using System.Collections.Generic;


namespace DBUpdater.Tables
{
	/// <summary>
	/// Generated by MyGeneration using the NHibernate Object Mapping 1.3.1 by Grimaldi Giuseppe (giuseppe.grimaldi@infracom.it)
	/// </summary>
	[Serializable]
	public class FofGamedrive 
	{
		#region Private Members
		
		// Variabili di stato
		private bool misChanged;
		private bool misDeleted;

		// Primary Key(s) 
		private int mid; 
		
		// Properties 
		private byte mstartquarter; 
		private byte mstartminutes; 
		private byte mstartseconds; 
		private byte mendquarter; 
		private byte mendminutes; 
		private byte mendseconds; 
		private byte mstartyardsfromgoal; 
		private byte mplaycount; 
		private short myardsgained; 
		private byte mresult; 
		private int mgameid; 
		private byte mteam; 		

		#endregion
		
		#region Default ( Empty ) Class Constructor
		
		/// <summary>
		/// default constructor
		/// </summary>
		public FofGamedrive()
		{
			mid = 0; 
			mstartquarter = 0; 
			mstartminutes = 0; 
			mstartseconds = 0; 
			mendquarter = 0; 
			mendminutes = 0; 
			mendseconds = 0; 
			mstartyardsfromgoal = 0; 
			mplaycount = 0; 
			myardsgained = 0; 
			mresult = 0; 
			mgameid = 0; 
			mteam = 0; 
		}
		
		#endregion // End of Default ( Empty ) Class Constructor
		
		#region Full Constructor
		
		/// <summary>
		/// full constructor
		/// </summary>
		public FofGamedrive(int id, byte startquarter, byte startminutes, byte startseconds, byte endquarter, byte endminutes, byte endseconds, byte startyardsfromgoal, byte playcount, short yardsgained, byte result, int gameid, byte team)
		{
			mid = id; 
			mstartquarter = startquarter; 
			mstartminutes = startminutes; 
			mstartseconds = startseconds; 
			mendquarter = endquarter; 
			mendminutes = endminutes; 
			mendseconds = endseconds; 
			mstartyardsfromgoal = startyardsfromgoal; 
			mplaycount = playcount; 
			myardsgained = yardsgained; 
			mresult = result; 
			mgameid = gameid; 
			mteam = team; 
		}
		
		#endregion // End Full Constructor
		
		#region Internal Accessors for NHibernate
		
		/// <summary>
		/// 
		/// </summary>
		internal virtual int _Id
		{
			get { return mid; }
			set { mid = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _StartQuarter
		{
			get { return mstartquarter; }
			set { mstartquarter = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _StartMinutes
		{
			get { return mstartminutes; }
			set { mstartminutes = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _StartSeconds
		{
			get { return mstartseconds; }
			set { mstartseconds = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _EndQuarter
		{
			get { return mendquarter; }
			set { mendquarter = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _EndMinutes
		{
			get { return mendminutes; }
			set { mendminutes = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _EndSeconds
		{
			get { return mendseconds; }
			set { mendseconds = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _StartYardsFromGoal
		{
			get { return mstartyardsfromgoal; }
			set { mstartyardsfromgoal = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _PlayCount
		{
			get { return mplaycount; }
			set { mplaycount = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual short _YardsGained
		{
			get { return myardsgained; }
			set { myardsgained = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _Result
		{
			get { return mresult; }
			set { mresult = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual int _Gameid
		{
			get { return mgameid; }
			set { mgameid = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _Team
		{
			get { return mteam; }
			set { mteam = value; }
		} 
	  
		#endregion // Internal Accessors for NHibernate 

		#region Public Properties
			
		/// <summary>
		/// 
		/// </summary>		
		public virtual int Id
		{
			get { return mid; }
			set { misChanged |= (mid != value); mid = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual byte StartQuarter
		{
			get { return mstartquarter; }
			set { misChanged |= (mstartquarter != value); mstartquarter = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual byte StartMinutes
		{
			get { return mstartminutes; }
			set { misChanged |= (mstartminutes != value); mstartminutes = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual byte StartSeconds
		{
			get { return mstartseconds; }
			set { misChanged |= (mstartseconds != value); mstartseconds = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual byte EndQuarter
		{
			get { return mendquarter; }
			set { misChanged |= (mendquarter != value); mendquarter = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual byte EndMinutes
		{
			get { return mendminutes; }
			set { misChanged |= (mendminutes != value); mendminutes = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual byte EndSeconds
		{
			get { return mendseconds; }
			set { misChanged |= (mendseconds != value); mendseconds = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual byte StartYardsFromGoal
		{
			get { return mstartyardsfromgoal; }
			set { misChanged |= (mstartyardsfromgoal != value); mstartyardsfromgoal = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual byte PlayCount
		{
			get { return mplaycount; }
			set { misChanged |= (mplaycount != value); mplaycount = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual short YardsGained
		{
			get { return myardsgained; }
			set { misChanged |= (myardsgained != value); myardsgained = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual byte Result
		{
			get { return mresult; }
			set { misChanged |= (mresult != value); mresult = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual int Gameid
		{
			get { return mgameid; }
			set { misChanged |= (mgameid != value); mgameid = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual byte Team
		{
			get { return mteam; }
			set { misChanged |= (mteam != value); mteam = value; }
		} 
	  
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public virtual bool IsChanged
		{
			get { return misChanged; }
		}
		
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public virtual bool IsDeleted
		{
			get { return misDeleted; }
		}
		
		#endregion 
		
		#region Public Functions

		/// <summary>
		/// mark the item as deleted
		/// </summary>
		public virtual void MarkAsDeleted()
		{
			misDeleted = true;
			misChanged = true;
		}
		
		#endregion
		
		#region Equals And HashCode Overrides
		
		/// <summary>
		/// local implementation of Equals based on unique value members
		/// </summary>
		public override bool Equals( object obj )
		{
			if( this == obj ) return true;
			if( ( obj == null ) || ( obj.GetType() != this.GetType() ) ) return false;
			FofGamedrive castObj = (FofGamedrive)obj; 
			return ( castObj != null ) &&
				( this.mid == castObj.Id );
		}
		
		/// <summary>
		/// local implementation of GetHashCode based on unique value members
		/// </summary>
		public override int GetHashCode()
		{ 
			int hash = 57; 
			hash = 27 * hash * this.mid.GetHashCode();
					
			return hash;		
			
		}
		
		#endregion
		
	}
}