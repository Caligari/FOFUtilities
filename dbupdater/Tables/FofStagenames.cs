/*

insert license info here

*/

using System;
using System.Collections;
using System.Collections.Generic;


namespace DBUpdater.Tables
{
	/// <summary>
	/// Generated by MyGeneration using the NHibernate Object Mapping 1.3.1 by Grimaldi Giuseppe (giuseppe.grimaldi@infracom.it)
	/// </summary>
	[Serializable]
	public class FofStagenames 
	{
		#region Private Members
		
		// Variabili di stato
		private bool misChanged;
		private bool misDeleted;

		// Primary Key(s) 
		private int mid; 
		
		// Properties 
		private string mstagename; 
		private byte mstageindex; 
		private byte mgameinfostage; 
		private byte mgameinfoweek; 
		private byte mgameinfofastage; 
		private short mtransactionstage; 		

		#endregion
		
		#region Default ( Empty ) Class Constructor
		
		/// <summary>
		/// default constructor
		/// </summary>
		public FofStagenames()
		{
			mid = 0; 
			mstagename = null; 
			mstageindex = 0; 
			mgameinfostage = 0; 
			mgameinfoweek = 0; 
			mgameinfofastage = 0; 
			mtransactionstage = 0; 
		}
		
		#endregion // End of Default ( Empty ) Class Constructor
		
		#region Full Constructor
		
		/// <summary>
		/// full constructor
		/// </summary>
		public FofStagenames(int id, string stagename, byte stageindex, byte gameinfostage, byte gameinfoweek, byte gameinfofastage, short transactionstage)
		{
			mid = id; 
			mstagename = stagename; 
			mstageindex = stageindex; 
			mgameinfostage = gameinfostage; 
			mgameinfoweek = gameinfoweek; 
			mgameinfofastage = gameinfofastage; 
			mtransactionstage = transactionstage; 
		}
		
		#endregion // End Full Constructor
		
		#region Internal Accessors for NHibernate
		
		/// <summary>
		/// 
		/// </summary>
		internal virtual int _Id
		{
			get { return mid; }
			set { mid = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual string _StageName
		{
			get { return mstagename; }
			set { mstagename = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _StageIndex
		{
			get { return mstageindex; }
			set { mstageindex = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _GameInfoStage
		{
			get { return mgameinfostage; }
			set { mgameinfostage = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _GameInfoWeek
		{
			get { return mgameinfoweek; }
			set { mgameinfoweek = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _GameInfofaStage
		{
			get { return mgameinfofastage; }
			set { mgameinfofastage = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual short _TransactionStage
		{
			get { return mtransactionstage; }
			set { mtransactionstage = value; }
		} 
	  
		#endregion // Internal Accessors for NHibernate 

		#region Public Properties
			
		/// <summary>
		/// 
		/// </summary>		
		public virtual int Id
		{
			get { return mid; }
			set { misChanged |= (mid != value); mid = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual string StageName
		{
			get { return mstagename; }
			set	
			{
				if ( value != null )
					if( value.Length > 45)
						throw new ArgumentOutOfRangeException("Invalid value for StageName", value, value.ToString());
				
				misChanged |= (mstagename != value); mstagename = value;
			}
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual byte StageIndex
		{
			get { return mstageindex; }
			set { misChanged |= (mstageindex != value); mstageindex = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual byte GameInfoStage
		{
			get { return mgameinfostage; }
			set { misChanged |= (mgameinfostage != value); mgameinfostage = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual byte GameInfoWeek
		{
			get { return mgameinfoweek; }
			set { misChanged |= (mgameinfoweek != value); mgameinfoweek = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual byte GameInfofaStage
		{
			get { return mgameinfofastage; }
			set { misChanged |= (mgameinfofastage != value); mgameinfofastage = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual short TransactionStage
		{
			get { return mtransactionstage; }
			set { misChanged |= (mtransactionstage != value); mtransactionstage = value; }
		} 
	  
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public virtual bool IsChanged
		{
			get { return misChanged; }
		}
		
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public virtual bool IsDeleted
		{
			get { return misDeleted; }
		}
		
		#endregion 
		
		#region Public Functions

		/// <summary>
		/// mark the item as deleted
		/// </summary>
		public virtual void MarkAsDeleted()
		{
			misDeleted = true;
			misChanged = true;
		}
		
		#endregion
		
		#region Equals And HashCode Overrides
		
		/// <summary>
		/// local implementation of Equals based on unique value members
		/// </summary>
		public override bool Equals( object obj )
		{
			if( this == obj ) return true;
			if( ( obj == null ) || ( obj.GetType() != this.GetType() ) ) return false;
			FofStagenames castObj = (FofStagenames)obj; 
			return ( castObj != null ) &&
				( this.mid == castObj.Id );
		}
		
		/// <summary>
		/// local implementation of GetHashCode based on unique value members
		/// </summary>
		public override int GetHashCode()
		{ 
			int hash = 57; 
			hash = 27 * hash * this.mid.GetHashCode();
					
			return hash;		
			
		}
		
		#endregion
		
	}
}