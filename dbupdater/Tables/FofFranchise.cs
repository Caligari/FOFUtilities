/*

insert license info here

*/

using System;
using System.Collections;
using System.Collections.Generic;


namespace DBUpdater.Tables
{
	/// <summary>
	/// Generated by MyGeneration using the NHibernate Object Mapping 1.3.1 by Grimaldi Giuseppe (giuseppe.grimaldi@infracom.it)
	/// </summary>
	[Serializable]
	public class FofFranchise 
	{
		#region Private Members
		
		// Variabili di stato
		private bool misChanged;
		private bool misDeleted;

		// Primary Key(s) 
		private short mid; 
		
		// Properties 
		private byte mteamindex; 
		private short myear; 
		private byte mfranchisevalue; 
		private byte mprofitscore; 
		private byte mperformancescore; 
		private byte mrosterscore; 
		private byte mplayoffs; 
		private byte mwins; 
		private byte mlosses; 
		private byte mties; 
		private short mpointsfor; 
		private short mpointsagainst; 
		private byte mconfwins; 
		private byte mconfloss; 
		private byte mconfties; 
		private byte mdivwin; 
		private byte mdivloss; 
		private byte mdivtie; 
		private int mattendance; 
		private int mstadiumcapacity; 
		private long mtvrevenue; 
		private long mticketrevenue; 
		private long msuiterevenue; 
		private long mplayersalaries; 
		private long mplayerbonuses; 
		private long mstadiumpayment; 
		private long mconcessions; 
		private long mparking; 
		private long madvertising; 
		private long mtraining; 
		private long mcoaching; 
		private long mscouting; 
		private long mmaintenance; 		

		#endregion
		
		#region Default ( Empty ) Class Constructor
		
		/// <summary>
		/// default constructor
		/// </summary>
		public FofFranchise()
		{
			mid = 0; 
			mteamindex = 0; 
			myear = 0; 
			mfranchisevalue = 0; 
			mprofitscore = 0; 
			mperformancescore = 0; 
			mrosterscore = 0; 
			mplayoffs = 0; 
			mwins = 0; 
			mlosses = 0; 
			mties = 0; 
			mpointsfor = 0; 
			mpointsagainst = 0; 
			mconfwins = 0; 
			mconfloss = 0; 
			mconfties = 0; 
			mdivwin = 0; 
			mdivloss = 0; 
			mdivtie = 0; 
			mattendance = 0; 
			mstadiumcapacity = 0; 
			mtvrevenue = 0; 
			mticketrevenue = 0; 
			msuiterevenue = 0; 
			mplayersalaries = 0; 
			mplayerbonuses = 0; 
			mstadiumpayment = 0; 
			mconcessions = 0; 
			mparking = 0; 
			madvertising = 0; 
			mtraining = 0; 
			mcoaching = 0; 
			mscouting = 0; 
			mmaintenance = 0; 
		}
		
		#endregion // End of Default ( Empty ) Class Constructor
		
		#region Full Constructor
		
		/// <summary>
		/// full constructor
		/// </summary>
		public FofFranchise(short id, byte teamindex, short year, byte franchisevalue, byte profitscore, byte performancescore, byte rosterscore, byte playoffs, byte wins, byte losses, byte ties, short pointsfor, short pointsagainst, byte confwins, byte confloss, byte confties, byte divwin, byte divloss, byte divtie, int attendance, int stadiumcapacity, long tvrevenue, long ticketrevenue, long suiterevenue, long playersalaries, long playerbonuses, long stadiumpayment, long concessions, long parking, long advertising, long training, long coaching, long scouting, long maintenance)
		{
			mid = id; 
			mteamindex = teamindex; 
			myear = year; 
			mfranchisevalue = franchisevalue; 
			mprofitscore = profitscore; 
			mperformancescore = performancescore; 
			mrosterscore = rosterscore; 
			mplayoffs = playoffs; 
			mwins = wins; 
			mlosses = losses; 
			mties = ties; 
			mpointsfor = pointsfor; 
			mpointsagainst = pointsagainst; 
			mconfwins = confwins; 
			mconfloss = confloss; 
			mconfties = confties; 
			mdivwin = divwin; 
			mdivloss = divloss; 
			mdivtie = divtie; 
			mattendance = attendance; 
			mstadiumcapacity = stadiumcapacity; 
			mtvrevenue = tvrevenue; 
			mticketrevenue = ticketrevenue; 
			msuiterevenue = suiterevenue; 
			mplayersalaries = playersalaries; 
			mplayerbonuses = playerbonuses; 
			mstadiumpayment = stadiumpayment; 
			mconcessions = concessions; 
			mparking = parking; 
			madvertising = advertising; 
			mtraining = training; 
			mcoaching = coaching; 
			mscouting = scouting; 
			mmaintenance = maintenance; 
		}
		
		#endregion // End Full Constructor
		
		#region Internal Accessors for NHibernate
		
		/// <summary>
		/// 
		/// </summary>
		internal virtual short _Id
		{
			get { return mid; }
			set { mid = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _TeamIndex
		{
			get { return mteamindex; }
			set { mteamindex = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual short _Year
		{
			get { return myear; }
			set { myear = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _FranchiseValue
		{
			get { return mfranchisevalue; }
			set { mfranchisevalue = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _ProfitScore
		{
			get { return mprofitscore; }
			set { mprofitscore = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _PerformanceScore
		{
			get { return mperformancescore; }
			set { mperformancescore = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _RosterScore
		{
			get { return mrosterscore; }
			set { mrosterscore = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _Playoffs
		{
			get { return mplayoffs; }
			set { mplayoffs = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _Wins
		{
			get { return mwins; }
			set { mwins = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _Losses
		{
			get { return mlosses; }
			set { mlosses = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _Ties
		{
			get { return mties; }
			set { mties = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual short _PointsFor
		{
			get { return mpointsfor; }
			set { mpointsfor = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual short _PointsAgainst
		{
			get { return mpointsagainst; }
			set { mpointsagainst = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _ConfWins
		{
			get { return mconfwins; }
			set { mconfwins = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _ConfLoss
		{
			get { return mconfloss; }
			set { mconfloss = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _ConfTies
		{
			get { return mconfties; }
			set { mconfties = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _DivWin
		{
			get { return mdivwin; }
			set { mdivwin = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _DivLoss
		{
			get { return mdivloss; }
			set { mdivloss = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual byte _DivTie
		{
			get { return mdivtie; }
			set { mdivtie = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual int _Attendance
		{
			get { return mattendance; }
			set { mattendance = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual int _StadiumCapacity
		{
			get { return mstadiumcapacity; }
			set { mstadiumcapacity = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual long _TvRevenue
		{
			get { return mtvrevenue; }
			set { mtvrevenue = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual long _TicketRevenue
		{
			get { return mticketrevenue; }
			set { mticketrevenue = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual long _SuiteRevenue
		{
			get { return msuiterevenue; }
			set { msuiterevenue = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual long _PlayerSalaries
		{
			get { return mplayersalaries; }
			set { mplayersalaries = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual long _PlayerBonuses
		{
			get { return mplayerbonuses; }
			set { mplayerbonuses = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual long _StadiumPayment
		{
			get { return mstadiumpayment; }
			set { mstadiumpayment = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual long _Concessions
		{
			get { return mconcessions; }
			set { mconcessions = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual long _Parking
		{
			get { return mparking; }
			set { mparking = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual long _Advertising
		{
			get { return madvertising; }
			set { madvertising = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual long _Training
		{
			get { return mtraining; }
			set { mtraining = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual long _Coaching
		{
			get { return mcoaching; }
			set { mcoaching = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual long _Scouting
		{
			get { return mscouting; }
			set { mscouting = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>
		internal virtual long _Maintenance
		{
			get { return mmaintenance; }
			set { mmaintenance = value; }
		} 
	  
		#endregion // Internal Accessors for NHibernate 

		#region Public Properties
			
		/// <summary>
		/// 
		/// </summary>		
		public virtual short Id
		{
			get { return mid; }
			set { misChanged |= (mid != value); mid = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual byte TeamIndex
		{
			get { return mteamindex; }
			set { misChanged |= (mteamindex != value); mteamindex = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual short Year
		{
			get { return myear; }
			set { misChanged |= (myear != value); myear = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual byte FranchiseValue
		{
			get { return mfranchisevalue; }
			set { misChanged |= (mfranchisevalue != value); mfranchisevalue = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual byte ProfitScore
		{
			get { return mprofitscore; }
			set { misChanged |= (mprofitscore != value); mprofitscore = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual byte PerformanceScore
		{
			get { return mperformancescore; }
			set { misChanged |= (mperformancescore != value); mperformancescore = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual byte RosterScore
		{
			get { return mrosterscore; }
			set { misChanged |= (mrosterscore != value); mrosterscore = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual byte Playoffs
		{
			get { return mplayoffs; }
			set { misChanged |= (mplayoffs != value); mplayoffs = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual byte Wins
		{
			get { return mwins; }
			set { misChanged |= (mwins != value); mwins = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual byte Losses
		{
			get { return mlosses; }
			set { misChanged |= (mlosses != value); mlosses = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual byte Ties
		{
			get { return mties; }
			set { misChanged |= (mties != value); mties = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual short PointsFor
		{
			get { return mpointsfor; }
			set { misChanged |= (mpointsfor != value); mpointsfor = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual short PointsAgainst
		{
			get { return mpointsagainst; }
			set { misChanged |= (mpointsagainst != value); mpointsagainst = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual byte ConfWins
		{
			get { return mconfwins; }
			set { misChanged |= (mconfwins != value); mconfwins = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual byte ConfLoss
		{
			get { return mconfloss; }
			set { misChanged |= (mconfloss != value); mconfloss = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual byte ConfTies
		{
			get { return mconfties; }
			set { misChanged |= (mconfties != value); mconfties = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual byte DivWin
		{
			get { return mdivwin; }
			set { misChanged |= (mdivwin != value); mdivwin = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual byte DivLoss
		{
			get { return mdivloss; }
			set { misChanged |= (mdivloss != value); mdivloss = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual byte DivTie
		{
			get { return mdivtie; }
			set { misChanged |= (mdivtie != value); mdivtie = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual int Attendance
		{
			get { return mattendance; }
			set { misChanged |= (mattendance != value); mattendance = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual int StadiumCapacity
		{
			get { return mstadiumcapacity; }
			set { misChanged |= (mstadiumcapacity != value); mstadiumcapacity = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual long TvRevenue
		{
			get { return mtvrevenue; }
			set { misChanged |= (mtvrevenue != value); mtvrevenue = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual long TicketRevenue
		{
			get { return mticketrevenue; }
			set { misChanged |= (mticketrevenue != value); mticketrevenue = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual long SuiteRevenue
		{
			get { return msuiterevenue; }
			set { misChanged |= (msuiterevenue != value); msuiterevenue = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual long PlayerSalaries
		{
			get { return mplayersalaries; }
			set { misChanged |= (mplayersalaries != value); mplayersalaries = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual long PlayerBonuses
		{
			get { return mplayerbonuses; }
			set { misChanged |= (mplayerbonuses != value); mplayerbonuses = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual long StadiumPayment
		{
			get { return mstadiumpayment; }
			set { misChanged |= (mstadiumpayment != value); mstadiumpayment = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual long Concessions
		{
			get { return mconcessions; }
			set { misChanged |= (mconcessions != value); mconcessions = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual long Parking
		{
			get { return mparking; }
			set { misChanged |= (mparking != value); mparking = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual long Advertising
		{
			get { return madvertising; }
			set { misChanged |= (madvertising != value); madvertising = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual long Training
		{
			get { return mtraining; }
			set { misChanged |= (mtraining != value); mtraining = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual long Coaching
		{
			get { return mcoaching; }
			set { misChanged |= (mcoaching != value); mcoaching = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual long Scouting
		{
			get { return mscouting; }
			set { misChanged |= (mscouting != value); mscouting = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual long Maintenance
		{
			get { return mmaintenance; }
			set { misChanged |= (mmaintenance != value); mmaintenance = value; }
		} 
	  
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public virtual bool IsChanged
		{
			get { return misChanged; }
		}
		
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public virtual bool IsDeleted
		{
			get { return misDeleted; }
		}
		
		#endregion 
		
		#region Public Functions

		/// <summary>
		/// mark the item as deleted
		/// </summary>
		public virtual void MarkAsDeleted()
		{
			misDeleted = true;
			misChanged = true;
		}
		
		#endregion
		
		#region Equals And HashCode Overrides
		
		/// <summary>
		/// local implementation of Equals based on unique value members
		/// </summary>
		public override bool Equals( object obj )
		{
			if( this == obj ) return true;
			if( ( obj == null ) || ( obj.GetType() != this.GetType() ) ) return false;
			FofFranchise castObj = (FofFranchise)obj; 
			return ( castObj != null ) &&
				( this.mid == castObj.Id );
		}
		
		/// <summary>
		/// local implementation of GetHashCode based on unique value members
		/// </summary>
		public override int GetHashCode()
		{ 
			int hash = 57; 
			hash = 27 * hash * this.mid.GetHashCode();
					
			return hash;		
			
		}
		
		#endregion
		
	}
}